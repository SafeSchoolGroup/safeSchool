<?php
namespace API\ExploitBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\ButtonType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Email;
use AppBundle\Form\Type\TelType;
use AppBundle\Validator\IsTelephone;
use AppBundle\Validator\IsLetter;
use AppBundle\Validator\IsLetterInfo;

use Symfony\Component\Validator\Constraints\Regex;

use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
//use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader;
use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;

use AppBundle\Entity\Exploit;
use AppBundle\Entity\Apprenant;
use AppBundle\Entity\Tuteur;
use AppBundle\Entity\Fichier;

use AppBundle\Form\ExploitType;

/**
 * Exploit controller.
 *
 */
class ExploitController extends Controller
{

    /**
     * Lists all Exploit entities.
     *
     */
    public function indexAction(Request $request)
    {

        //$session = $request->getSession();
        $idUser =  $request->get('id_user');
        //$session->set('id',1);
        $maxExploits = 5;
        $em = $this->getDoctrine()->getManager();
        $apprenant = $em->getRepository('AppBundle:Apprenant')->find($idUser);

        $exploitsQuery = $em->getRepository('AppBundle:Exploit')->getListExploitPerPage();


        $paginator  = $this->get('knp_paginator');
        $exploitsPagination = $paginator->paginate(
            $exploitsQuery,
            $request->query->getInt('page', 1),//ceil($exploits_Count / $maxExploits)/*page number*/,
            $request->query->getInt('limit', $maxExploits)//$maxExploits
        );


        return $this->render('APIExploitBundle:exploit:index.html.twig', array(
            //'exploits' => $exploits,
            'exploitsPagination'=> $exploitsPagination,
            'apprenant' => $apprenant,
            'idUser' => $idUser,

        ));
    }

    /**
     * Creates a new Exploit entity.
     *
     */
    public function newAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $exploit = new Exploit();
        //$apprenant = new Apprenant();
        //$exploit->setDatePublication(new \DateTime('now'));
        $exploit->setPoint(0);

        $form = $this->createForm('AppBundle\Form\ExploitType', $exploit);
        $form->handleRequest($request);
        $idUser =  $request->get('id_user');
        //die(dump($idUser));
        $apprenant = $em->getRepository('AppBundle:Apprenant')->find($idUser);
        //die(dump($apprenant));
        //die(dump($apprenant->getExploits()));
        if ($form->isSubmitted() && $form->isValid()) {
            //die(dump($request->files));

            $photoC = $request->files->get('photo_couverture');
            $fichiersJoints = $request->files->get('fichiers_joints');
            //die(dump($fichiersJoints));

            // $encoder = new JsonEncoder();
            // $normalizer = new ObjectNormalizer();
            // $normalizer->setIgnoredAttributes(array('linkTarget'));
            //
            // $normalizer->setCircularReferenceHandler(function ($object) {
            //     return $object->getSize();
            // });
            //
            //$serializer = new Serializer(array($normalizer), array($encoder));
            // var_dump($serializer->serialize($array_files, 'json'));
            //$data = $serializer->serialize($fichiersJoints, 'json');
            //die(dump($data));

            $fileNameFichiers = array();
            foreach($fichiersJoints as $fichier) {
                $fileNameFichiers[] = $this->get('app.exploit_uploader')->upload($fichier);
                foreach ($fileNameFichiers as $fileName) {
                    $file = new Fichier();
                    $file->setNom($fichier->getClientOriginalName());
                    $file->setTypeFichier($fichier->getClientMimeType());
                    $file->setExploit($exploit);

                }
                $file->setChemin($fileName);
                $em->persist($file);
            }

            if ($photoC != NULL) {
                $photoCouverture = $photoC;
                $fileNamePhoto = $this->get('app.exploit_uploader')->upload($photoCouverture);

                $fichierPhotoCouverture = new Fichier();
                $fichierPhotoCouverture->setNom($photoCouverture->getClientOriginalName());
                $fichierPhotoCouverture->setChemin($fileNamePhoto);
                $fichierPhotoCouverture->setTypeFichier($photoCouverture->getClientMimeType());
                $fichierPhotoCouverture->setIsPhotoCouvertureExploit(true);
                $fichierPhotoCouverture->setExploit($exploit);

                $em->persist($fichierPhotoCouverture);
            }

            $em->persist($exploit);
            $apprenant->addExploit($exploit);
            $em->flush();

            return $this->redirectToRoute('exploit_show', array('id' => $exploit->getId(),
                                                                'idUser' => $idUser,


                                                            ));
        }

        return $this->render('APIExploitBundle:exploit:new.html.twig', array(
            'exploit' => $exploit,
            'idUser' => $idUser,
            'apprenant' => $apprenant,
            'form' => $form->createView(),
        ));
    }

    /**
     * Finds and displays a Exploit entity.
     *
     */
    public function showAction(Exploit $exploit, Request $request)
    {
        $idUser =  $request->get('id_user');
        //die(dump($idUser));
        $deleteForm = $this->createDeleteForm($exploit,$idUser);
        return $this->render('APIExploitBundle:exploit:show.html.twig', array(
            'exploit' => $exploit,
            'idUser'  => $idUser,
            'delete_form' => $deleteForm->createView(),
        ));
    }


    /**
     * Displays a form to edit an existing Exploit entity.
     *
     */
    public function editAction(Request $request, Exploit $exploit)
    {
        $idUser =  $request->get('id_user');
        $deleteForm = $this->createDeleteForm($exploit,$idUser);
        $editForm = $this->createForm('AppBundle\Form\ExploitType', $exploit);
        $editForm->handleRequest($request);
        //$idUser =  $request->get('id_user');

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($exploit);
            $em->flush();

            return $this->redirectToRoute('exploit_edit', array('id' => $exploit->getId(),
                                                                'idUser'=>$idUser));
        }

        return $this->render('APIExploitBundle:exploit:edit.html.twig', array(
            'exploit' => $exploit,
            'idUser' => $idUser,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a Exploit entity.
     *
     */
    public function deleteAction(Request $request, Exploit $exploit)
    {
        $idUser =  $request->get('id_user');
        $form = $this->createDeleteForm($exploit,$idUser);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($exploit);
            $em->flush();
        }

        return $this->redirectToRoute('exploit_index');
    }

    /**
     * Creates a form to delete a Exploit entity.
     *
     * @param Exploit $exploit The Exploit entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Exploit $exploit, $idUser)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('exploit_delete', array('id' => $exploit->getId(),
                                                                    'idUser' => $idUser)))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }


    /**
     * Vote for an Exploit entity.
     *
     */
    public function voteAction(Request $request)
    {
      $em = $this->getDoctrine()->getManager();
      $id= $request->get('id');
      $exploit = $em->getRepository('AppBundle:Exploit')->find($id);
      $point =$exploit->getPoint();
      $exploit->setPoint($point+1);
      $em->persist($exploit);
      $em->flush();

      return new JsonResponse($point);

    }

    public function galerieAction(Request $request)
    {
        $form=$this->createFormBuilder()
        ->add('filereserie',TextType::class)
        ->add('annee',TextType::class)
        ->getForm();

            $form->handleRequest($request);

            if ($form->isValid()){
                $data = $form->getData();
            }
        return $this->render('galeries/galerie.html.twig', array(
            'form' => $form->createView(),
        ));
    }
    public function exploitAprenantAction(Request $request){

       return $this->render('exploitsAprenant/exploitAprenant.html.twig');

    }

    /**
     * Lists all Exploit entities by sub domain.
     *
     */
    public function domaineAction(Request $request )
    {
        $id = $request->get('id');
        $maxExploits = 2;
        $em = $this->getDoctrine()->getManager();
        $exploitsQuery=$em->getRepository('AppBundle:Exploit')->getExploitsBysousDomaine($id);

        $paginator  = $this->get('knp_paginator');
        $exploitsPagination = $paginator->paginate(
            $exploitsQuery,
            $request->query->getInt('page', 1),//ceil($exploits_Count / $maxExploits)/*page number*/,
            $request->query->getInt('limit', $maxExploits)//$maxExploits
        );

        return $this->render('APIExploitBundle:exploit:exploits_specifique.html.twig', array(
              'exploitsPagination' => $exploitsPagination,
        ));

    }

    /*public function apprenant_exploit(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $apprenant_exploitQuery=$em->getRepository('AppBundle:Exploit')->getListExploitPerApprenant($id);
    }*/

    public function commentAction(Request $request)
    {
        $id = 'thread_id';
        $thread = $this->container->get('fos_comment.manager.thread')->findThreadById($id);
        if (null === $thread) {
            $thread = $this->container->get('fos_comment.manager.thread')->createThread();
            $thread->setId($id);
            $thread->setPermalink($request->getUri());

            // Add the thread
            $this->container->get('fos_comment.manager.thread')->saveThread($thread);
        }

        $comments = $this->container->get('fos_comment.manager.comment')->findCommentTreeByThread($thread);

        return $this->render('APIExploitBundle:exploit:comment.html.twig', array(
            'comments' => $comments,
            'thread' => $thread,
        ));
    }





}
